package com.iribeirodev.cqrses.aggregate;

import java.math.BigDecimal;
import java.util.UUID;

import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;

import com.iribeirodev.cqrses.command.CreateAccountCommand;
import com.iribeirodev.cqrses.command.CreditMoneyCommand;
import com.iribeirodev.cqrses.command.DebitMoneyCommand;
import com.iribeirodev.cqrses.event.AccountCreatedEvent;
import com.iribeirodev.cqrses.event.MoneyCreditedEvent;
import com.iribeirodev.cqrses.event.MoneyDebitedEvent;
import com.iribeirodev.cqrses.exception.InsufficientBalanceException;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * Aggregate that receives and handles the Commands 
 * and for every Command will dispatch a Query.
 */
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Aggregate
public class BankAcountAggregate {
	@AggregateIdentifier
	private UUID id;
	private BigDecimal balance;
	private String owner;
	
	@CommandHandler
	public BankAcountAggregate(CreateAccountCommand command) {
		// The AggregateLifecycle component is used to notify the Aggregate 
		// that a new BankAccount was created by publishing the AccountCreatedEvent.
		AggregateLifecycle.apply(
				new AccountCreatedEvent(
					command.getAccountId(),
					command.getInitialBalance(),
					command.getOwner()
				)
		);
	}
	
	@EventSourcingHandler
	public void on(AccountCreatedEvent event) {
		// If we dispatched a Command, we defined its CommandHandler. 
		// Now, as we dispatched an Event, we need to define the EventHandler
		// The @EventSourcingHandler will define the annotated method 
		// as a handler for Events generated by that Aggregate
		id = event.getId();
		owner = event.getOwner();
		balance = event.getInitialBalance();
	}
	
	@CommandHandler
	public void handle(CreditMoneyCommand command) {
		AggregateLifecycle.apply(
				new MoneyCreditedEvent(
						command.getAccountId(), 
						command.getCreditAmount()
				)
		);
	}
	
	@EventSourcingHandler
	public void on(MoneyCreditedEvent event) {
		balance = balance.add(event.getCreditAmount());
	}
	
	@CommandHandler
	public void handle(DebitMoneyCommand command) {
		AggregateLifecycle.apply(
			new MoneyDebitedEvent(
					command.getAccountId(), 
					command.getDebitAmount()
			)
		);
	}
	
	@EventSourcingHandler
	public void on(MoneyDebitedEvent event) throws InsufficientBalanceException {
		if (balance.compareTo(event.getDebitAmount()) < 0)
			throw new InsufficientBalanceException(event.getId(), event.getDebitAmount());

		balance = balance.subtract(event.getDebitAmount());
	}
}
